% Studio: Code for generating smooth animations of caut objects and saving
% these videos as .avi files

[infiles inpath] = uigetfile('.mat','Pick simulation files','multiselect','on');
if ~iscell(infiles)
  infiles = {infiles};
end
datpath = [uigetdir(inpath,'set path for video files') filesep];

% Set parameters
%%
% Frame rate of outbound video
frate = 30;
% Type of file to save
profile = 'Motion JPEG AVI';
if strcmp(profile,'MPEG-4') || strcmp(profile,'Motion JPEG AVI')
    % If the output format of the video is appropriate, set the quality
    qual = 100;
else
    qual = 0;
end
% Degree of interpolation between frames
smooth = 500;
% Length of movie, in seconds
dur = 1800;
% Length of the loop to generate images
loopct = dur * frate;
% Starting time, in simulation time
simstart = 1;
% last sim time to process
simend = simstart + loopct/smooth;
% TODO(DVB) Colormaps -- need to generate as many as there are files
cmap = gray(5000).^2;
% TODO(DVB) Smart caxis set-up
cax = [-7 3];
% Video resolution; may require that a simulation be re-run with a bigger
% field, depending on whether the simulation ever reached the edge of the
% field. Use a higher value than will be displayed to avoid edge artifacts
res = [1028,1028];
% Number of rows and columns to hide when plotting data
offset = [4,4];
plotrange = [];
plotrange{2} = (1:(res(1)-offset(1))) + offset(1)/2;
plotrange{1} = (1:(res(2)-offset(2))) + offset(2)/2;
% If reseed is set to 1, then the original seeding is discarded and a new 
% seed is used
reseed = 1;
% Seeding is a struct the specifies how the field is seeded
seeding.loc = 'center';
% Here's the actual seed, which is positioned based on the value in
% seeding.loc
seeding.seed = ones(2)+1;
% Close all

% Loop through files
for ifile = 1:numel(infiles)
  % Load simulation
  load([inpath infiles{ifile}])
  csim.show = 0;
  toshow = csim.field(simstart,:,:);
  % Check whether it needs to be extended, and if so, how
  if ~isequal(size(toshow),res);
    % rerun the simulation with field sized properly
    newf = ones(1,res(1),res(2));
    sy = size(toshow,2);
    sx = size(toshow,3);
    yoff = (res(1) - sy)/2;
    xoff = (res(2) - sx)/2;
    newf(1,yoff+1 : end - yoff, xoff+1 : end - xoff) = toshow;
    csim.field = newf;
  end
  
  if reseed == 1
    csim.field(1,:,:) = 1;
    % If we want to run the sim with different starting field
    if strcmp(seeding.loc,'center')
      seed = seeding.seed;
      spos(1,:) = res(2)/2 + (1 : size(seed,1));
      spos(2,:) = res(1)/2 + (1 : size(seed,2));
      csim.field(1,spos(1,:),spos(2,:)) = seed; 
    end
  end

  % Video loop
    % For performance reasons, this loop will draw frames generated by
    % interpolating between sim frames by only working with two simframes
    % at a time, and generating a new set of frames when necessary 
  figure('color','k','units','normalized','position',[0 0 1 1],'menubar','none',...
    'renderer','zbuffer')
  % Set colormap
  colormap(cmap);
  % Create videowriter object
  vid = VideoWriter([datpath csim.simid],profile);
  if qual > 0
      vid.Quality = qual;   
  end
  vid.FrameRate = frate;
  vid.open;
  for i = 1:(simend - simstart)
    csim.field(2,:,:) = 0;
    % Buffer the interpolated frames between i and i + 1
    csim = csim.runSim;
    % Figure out what portions of the simulation don't need to be interped,
    % i.e. values that stay constant
    tointerp = find(squeeze(csim.field(2,:,:) - csim.field(1,:,:)));
    buff = interp1(csim.field(1:2,tointerp),linspace(1,2,smooth));
    
    for k = 1:smooth
      toplot = squeeze(csim.field(1,:,:));
      toplot(tointerp) = squeeze(buff(k,:));
      toplot = log(abs(fftshift(fft2(toplot))));
      % Apply median filter
      toplot = medfilt2(toplot,'symmetric');
      toplot = toplot(plotrange{2},plotrange{1});
      imagesc(toplot);
      set(gca,'units','pixels');
      set(gca,'position',[1 1 (res(2) - offset(2))-1 (res(1)-offset(1))]);
      axis off
      axis image
      caxis(cax);
    drawnow
    % Snag frame
    frame = getframe(gca);
    writeVideo(vid,frame);
    end
    csim.field(1,:,:) = csim.field(2,:,:);  
  end
  
  % Close vid
  vid.close
  close(gcf);
end